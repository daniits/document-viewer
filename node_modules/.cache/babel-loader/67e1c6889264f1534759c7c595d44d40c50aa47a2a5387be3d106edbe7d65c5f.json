{"ast":null,"code":"var _jsxFileName = \"D:\\\\Source Code\\\\document-viewer\\\\src\\\\component\\\\documenViewer\\\\index.tsx\",\n  _s = $RefreshSig$();\n// src/components/DocumentationViewer.tsx\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ReactMarkdown from 'react-markdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DocumentationViewer = () => {\n  _s();\n  const [docData, setDocData] = useState([]);\n  const [selectedPage, setSelectedPage] = useState(null);\n\n  // Replace 'YOUR_JSON_URL' with the actual URL to your JSON file.\n  const JSON_URL = 'https://gist.githubusercontent.com/thehappybug/65a466dcdb0908767057b80f0cb7ea5d/raw/6f10747c5feb7ce91b83392f2cee23ae06b20fe6/doc.json';\n  useEffect(() => {\n    axios.get(JSON_URL).then(response => {\n      // console.log(response.data.Pages)\n      // console.log(response.data.pages[0])\n      setDocData(response.data.Pages); // Assuming JSON structure has a 'pages' property.\n      setSelectedPage(response.data.Pages[0]); // Select the first page by default\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, []);\n  const handlePageSelect = page => {\n    setSelectedPage(page);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"documentation-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: docData.map((page, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: page === selectedPage ? 'selected' : '',\n          onClick: () => handlePageSelect(page),\n          children: page.title\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: selectedPage && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: selectedPage.bodyText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: selectedPage.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(DocumentationViewer, \"OJDXFYR7ysqzZTthApWjZtw1aDk=\");\n_c = DocumentationViewer;\nexport default DocumentationViewer;\nvar _c;\n$RefreshReg$(_c, \"DocumentationViewer\");","map":{"version":3,"names":["React","useState","useEffect","axios","ReactMarkdown","jsxDEV","_jsxDEV","Fragment","_Fragment","DocumentationViewer","_s","docData","setDocData","selectedPage","setSelectedPage","JSON_URL","get","then","response","data","Pages","catch","error","console","handlePageSelect","page","className","children","map","index","onClick","title","fileName","_jsxFileName","lineNumber","columnNumber","bodyText","body","_c","$RefreshReg$"],"sources":["D:/Source Code/document-viewer/src/component/documenViewer/index.tsx"],"sourcesContent":["// src/components/DocumentationViewer.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\ninterface Page {\r\n  title: string;\r\n  body: string;\r\n}\r\n\r\nconst DocumentationViewer: React.FC = () => {\r\n  const [docData, setDocData] = useState<Page[]>([]);\r\n  const [selectedPage, setSelectedPage] = useState<Page | null>(null);\r\n\r\n  // Replace 'YOUR_JSON_URL' with the actual URL to your JSON file.\r\n  const JSON_URL = 'https://gist.githubusercontent.com/thehappybug/65a466dcdb0908767057b80f0cb7ea5d/raw/6f10747c5feb7ce91b83392f2cee23ae06b20fe6/doc.json';\r\n\r\n  useEffect(() => {\r\n    axios.get(JSON_URL)\r\n      .then((response) => {\r\n        // console.log(response.data.Pages)\r\n        // console.log(response.data.pages[0])\r\n        setDocData(response.data.Pages); // Assuming JSON structure has a 'pages' property.\r\n        setSelectedPage(response.data.Pages[0]); // Select the first page by default\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error);\r\n      });\r\n  }, []);\r\n\r\n  const handlePageSelect = (page: Page) => {\r\n    setSelectedPage(page);\r\n  };\r\n\r\n  return (\r\n    <div className=\"documentation-viewer\">\r\n      <div className=\"menu\">\r\n        <ul>\r\n          {docData.map((page, index) => (\r\n            <li\r\n              key={index}\r\n              className={page === selectedPage ? 'selected' : ''}\r\n              onClick={() => handlePageSelect(page)}\r\n            >\r\n              {page.title}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className=\"main-content\">\r\n        {selectedPage && (\r\n          <>\r\n            <h1>{selectedPage.bodyText}</h1>\r\n            <ReactMarkdown>{selectedPage.body}</ReactMarkdown>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DocumentationViewer;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAO3C,MAAMC,mBAA6B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAS,EAAE,CAAC;EAClD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAc,IAAI,CAAC;;EAEnE;EACA,MAAMc,QAAQ,GAAG,uIAAuI;EAExJb,SAAS,CAAC,MAAM;IACdC,KAAK,CAACa,GAAG,CAACD,QAAQ,CAAC,CAChBE,IAAI,CAAEC,QAAQ,IAAK;MAClB;MACA;MACAN,UAAU,CAACM,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;MACjCN,eAAe,CAACI,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,gBAAgB,GAAIC,IAAU,IAAK;IACvCX,eAAe,CAACW,IAAI,CAAC;EACvB,CAAC;EAED,oBACEnB,OAAA;IAAKoB,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnCrB,OAAA;MAAKoB,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnBrB,OAAA;QAAAqB,QAAA,EACGhB,OAAO,CAACiB,GAAG,CAAC,CAACH,IAAI,EAAEI,KAAK,kBACvBvB,OAAA;UAEEoB,SAAS,EAAED,IAAI,KAAKZ,YAAY,GAAG,UAAU,GAAG,EAAG;UACnDiB,OAAO,EAAEA,CAAA,KAAMN,gBAAgB,CAACC,IAAI,CAAE;UAAAE,QAAA,EAErCF,IAAI,CAACM;QAAK,GAJNF,KAAK;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKR,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACN7B,OAAA;MAAKoB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC1Bd,YAAY,iBACXP,OAAA,CAAAE,SAAA;QAAAmB,QAAA,gBACErB,OAAA;UAAAqB,QAAA,EAAKd,YAAY,CAACuB;QAAQ;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAChC7B,OAAA,CAACF,aAAa;UAAAuB,QAAA,EAAEd,YAAY,CAACwB;QAAI;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgB,CAAC;MAAA,eAClD;IACH;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzB,EAAA,CAjDID,mBAA6B;AAAA6B,EAAA,GAA7B7B,mBAA6B;AAmDnC,eAAeA,mBAAmB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}